const supertest = require('supertest');const expect = require('chai').expect;const describe = require('mocha').describe;const it = require('mocha').it;const YAML = require('yamljs');const {seed} = require('../seeder');const {server} = require('../index');describe('Encoding Tests: ', () => {    before(() =>{    });    after(async () => {        await server.close();        console.log('Encoding testing done');    });    it('Can Create K8S secret', function (done) {        const config = {};        config.agentsUrl = 'xxxx';        config.airlinesUrl = 'yyyy';        config.hotelsUrl = 'zzzz';        config.autosUrl = 'aaaa'        config.usersUrl = 'bbbb'        supertest(server)            .post('/createK8SMongoSecret')            .set('Accept', 'application/json')            .send(config)            .expect(200)            .end((err, res) => {                if (err) return done(err);                const obj = YAML.parse(res.body)                expect(obj).to.be.an('object');                console.log(res.body)                done();            });    });    it('Will Error K8S secret', function (done) {        const config = {};        config.airlinesUrl = 'yyyy';        config.hotelsUrl = 'zzzz';        config.autosUrl = 'aaaa'        config.usersUrl = 'bbbb'        supertest(server)            .post('/createK8SMongoSecret')            .set('Accept', 'application/json')            .send(config)            .expect(422)            .end((err, res) => {                console.log(res.body)                done();            });    })    it('Can Seed', async () =>{        const  results  = await seed();        console.log(JSON.stringify(results));        expect(results).to.be.an('array');    }).timeout(10000);});